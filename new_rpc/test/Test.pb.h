// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Test.proto

#ifndef PROTOBUF_INCLUDED_Test_2eproto
#define PROTOBUF_INCLUDED_Test_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_Test_2eproto 

namespace protobuf_Test_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_Test_2eproto
namespace testNamespace {
class NumRequest;
class NumRequestDefaultTypeInternal;
extern NumRequestDefaultTypeInternal _NumRequest_default_instance_;
class NumResponse;
class NumResponseDefaultTypeInternal;
extern NumResponseDefaultTypeInternal _NumResponse_default_instance_;
}  // namespace testNamespace
namespace google {
namespace protobuf {
template<> ::testNamespace::NumRequest* Arena::CreateMaybeMessage<::testNamespace::NumRequest>(Arena*);
template<> ::testNamespace::NumResponse* Arena::CreateMaybeMessage<::testNamespace::NumResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace testNamespace {

// ===================================================================

class NumRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:testNamespace.NumRequest) */ {
 public:
  NumRequest();
  virtual ~NumRequest();

  NumRequest(const NumRequest& from);

  inline NumRequest& operator=(const NumRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NumRequest(NumRequest&& from) noexcept
    : NumRequest() {
    *this = ::std::move(from);
  }

  inline NumRequest& operator=(NumRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NumRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NumRequest* internal_default_instance() {
    return reinterpret_cast<const NumRequest*>(
               &_NumRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(NumRequest* other);
  friend void swap(NumRequest& a, NumRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NumRequest* New() const final {
    return CreateMaybeMessage<NumRequest>(NULL);
  }

  NumRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NumRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NumRequest& from);
  void MergeFrom(const NumRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NumRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 input1 = 1;
  bool has_input1() const;
  void clear_input1();
  static const int kInput1FieldNumber = 1;
  ::google::protobuf::int32 input1() const;
  void set_input1(::google::protobuf::int32 value);

  // optional int32 input2 = 2;
  bool has_input2() const;
  void clear_input2();
  static const int kInput2FieldNumber = 2;
  ::google::protobuf::int32 input2() const;
  void set_input2(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:testNamespace.NumRequest)
 private:
  void set_has_input1();
  void clear_has_input1();
  void set_has_input2();
  void clear_has_input2();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 input1_;
  ::google::protobuf::int32 input2_;
  friend struct ::protobuf_Test_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NumResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:testNamespace.NumResponse) */ {
 public:
  NumResponse();
  virtual ~NumResponse();

  NumResponse(const NumResponse& from);

  inline NumResponse& operator=(const NumResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NumResponse(NumResponse&& from) noexcept
    : NumResponse() {
    *this = ::std::move(from);
  }

  inline NumResponse& operator=(NumResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NumResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NumResponse* internal_default_instance() {
    return reinterpret_cast<const NumResponse*>(
               &_NumResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(NumResponse* other);
  friend void swap(NumResponse& a, NumResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NumResponse* New() const final {
    return CreateMaybeMessage<NumResponse>(NULL);
  }

  NumResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NumResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NumResponse& from);
  void MergeFrom(const NumResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NumResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 output = 1;
  bool has_output() const;
  void clear_output();
  static const int kOutputFieldNumber = 1;
  ::google::protobuf::int32 output() const;
  void set_output(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:testNamespace.NumResponse)
 private:
  void set_has_output();
  void clear_has_output();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 output_;
  friend struct ::protobuf_Test_2eproto::TableStruct;
};
// ===================================================================

class NumService_Stub;

class NumService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline NumService() {};
 public:
  virtual ~NumService();

  typedef NumService_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void add(::google::protobuf::RpcController* controller,
                       const ::testNamespace::NumRequest* request,
                       ::testNamespace::NumResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void minus(::google::protobuf::RpcController* controller,
                       const ::testNamespace::NumRequest* request,
                       ::testNamespace::NumResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(NumService);
};

class NumService_Stub : public NumService {
 public:
  NumService_Stub(::google::protobuf::RpcChannel* channel);
  NumService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~NumService_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements NumService ------------------------------------------

  void add(::google::protobuf::RpcController* controller,
                       const ::testNamespace::NumRequest* request,
                       ::testNamespace::NumResponse* response,
                       ::google::protobuf::Closure* done);
  void minus(::google::protobuf::RpcController* controller,
                       const ::testNamespace::NumRequest* request,
                       ::testNamespace::NumResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(NumService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NumRequest

// optional int32 input1 = 1;
inline bool NumRequest::has_input1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NumRequest::set_has_input1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NumRequest::clear_has_input1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NumRequest::clear_input1() {
  input1_ = 0;
  clear_has_input1();
}
inline ::google::protobuf::int32 NumRequest::input1() const {
  // @@protoc_insertion_point(field_get:testNamespace.NumRequest.input1)
  return input1_;
}
inline void NumRequest::set_input1(::google::protobuf::int32 value) {
  set_has_input1();
  input1_ = value;
  // @@protoc_insertion_point(field_set:testNamespace.NumRequest.input1)
}

// optional int32 input2 = 2;
inline bool NumRequest::has_input2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NumRequest::set_has_input2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NumRequest::clear_has_input2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NumRequest::clear_input2() {
  input2_ = 0;
  clear_has_input2();
}
inline ::google::protobuf::int32 NumRequest::input2() const {
  // @@protoc_insertion_point(field_get:testNamespace.NumRequest.input2)
  return input2_;
}
inline void NumRequest::set_input2(::google::protobuf::int32 value) {
  set_has_input2();
  input2_ = value;
  // @@protoc_insertion_point(field_set:testNamespace.NumRequest.input2)
}

// -------------------------------------------------------------------

// NumResponse

// optional int32 output = 1;
inline bool NumResponse::has_output() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NumResponse::set_has_output() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NumResponse::clear_has_output() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NumResponse::clear_output() {
  output_ = 0;
  clear_has_output();
}
inline ::google::protobuf::int32 NumResponse::output() const {
  // @@protoc_insertion_point(field_get:testNamespace.NumResponse.output)
  return output_;
}
inline void NumResponse::set_output(::google::protobuf::int32 value) {
  set_has_output();
  output_ = value;
  // @@protoc_insertion_point(field_set:testNamespace.NumResponse.output)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace testNamespace

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_Test_2eproto
