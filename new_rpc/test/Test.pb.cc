// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Test.proto

#include "Test.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace testNamespace {
class NumRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NumRequest>
      _instance;
} _NumRequest_default_instance_;
class NumResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NumResponse>
      _instance;
} _NumResponse_default_instance_;
}  // namespace testNamespace
namespace protobuf_Test_2eproto {
static void InitDefaultsNumRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::testNamespace::_NumRequest_default_instance_;
    new (ptr) ::testNamespace::NumRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::testNamespace::NumRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_NumRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNumRequest}, {}};

static void InitDefaultsNumResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::testNamespace::_NumResponse_default_instance_;
    new (ptr) ::testNamespace::NumResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::testNamespace::NumResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_NumResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNumResponse}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_NumRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NumResponse.base);
}

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::ServiceDescriptor* file_level_service_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::testNamespace::NumRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::testNamespace::NumRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::testNamespace::NumRequest, input1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::testNamespace::NumRequest, input2_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::testNamespace::NumResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::testNamespace::NumResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::testNamespace::NumResponse, output_),
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::testNamespace::NumRequest)},
  { 9, 15, sizeof(::testNamespace::NumResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::testNamespace::_NumRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::testNamespace::_NumResponse_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "Test.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, file_level_service_descriptors);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\nTest.proto\022\rtestNamespace\",\n\nNumReques"
      "t\022\016\n\006input1\030\001 \001(\005\022\016\n\006input2\030\002 \001(\005\"\035\n\013Num"
      "Response\022\016\n\006output\030\001 \001(\0052\212\001\n\nNumService\022"
      "<\n\003add\022\031.testNamespace.NumRequest\032\032.test"
      "Namespace.NumResponse\022>\n\005minus\022\031.testNam"
      "espace.NumRequest\032\032.testNamespace.NumRes"
      "ponseB\003\200\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 250);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Test.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_Test_2eproto
namespace testNamespace {

// ===================================================================

void NumRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NumRequest::kInput1FieldNumber;
const int NumRequest::kInput2FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NumRequest::NumRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Test_2eproto::scc_info_NumRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:testNamespace.NumRequest)
}
NumRequest::NumRequest(const NumRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&input1_, &from.input1_,
    static_cast<size_t>(reinterpret_cast<char*>(&input2_) -
    reinterpret_cast<char*>(&input1_)) + sizeof(input2_));
  // @@protoc_insertion_point(copy_constructor:testNamespace.NumRequest)
}

void NumRequest::SharedCtor() {
  ::memset(&input1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&input2_) -
      reinterpret_cast<char*>(&input1_)) + sizeof(input2_));
}

NumRequest::~NumRequest() {
  // @@protoc_insertion_point(destructor:testNamespace.NumRequest)
  SharedDtor();
}

void NumRequest::SharedDtor() {
}

void NumRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* NumRequest::descriptor() {
  ::protobuf_Test_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Test_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NumRequest& NumRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Test_2eproto::scc_info_NumRequest.base);
  return *internal_default_instance();
}


void NumRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:testNamespace.NumRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&input1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&input2_) -
        reinterpret_cast<char*>(&input1_)) + sizeof(input2_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NumRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:testNamespace.NumRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 input1 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_input1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &input1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 input2 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_input2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &input2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:testNamespace.NumRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:testNamespace.NumRequest)
  return false;
#undef DO_
}

void NumRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:testNamespace.NumRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 input1 = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->input1(), output);
  }

  // optional int32 input2 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->input2(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:testNamespace.NumRequest)
}

::google::protobuf::uint8* NumRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:testNamespace.NumRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 input1 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->input1(), target);
  }

  // optional int32 input2 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->input2(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testNamespace.NumRequest)
  return target;
}

size_t NumRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testNamespace.NumRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 input1 = 1;
    if (has_input1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->input1());
    }

    // optional int32 input2 = 2;
    if (has_input2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->input2());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NumRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:testNamespace.NumRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const NumRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NumRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:testNamespace.NumRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:testNamespace.NumRequest)
    MergeFrom(*source);
  }
}

void NumRequest::MergeFrom(const NumRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:testNamespace.NumRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      input1_ = from.input1_;
    }
    if (cached_has_bits & 0x00000002u) {
      input2_ = from.input2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NumRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:testNamespace.NumRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NumRequest::CopyFrom(const NumRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testNamespace.NumRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NumRequest::IsInitialized() const {
  return true;
}

void NumRequest::Swap(NumRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NumRequest::InternalSwap(NumRequest* other) {
  using std::swap;
  swap(input1_, other->input1_);
  swap(input2_, other->input2_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NumRequest::GetMetadata() const {
  protobuf_Test_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Test_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NumResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NumResponse::kOutputFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NumResponse::NumResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Test_2eproto::scc_info_NumResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:testNamespace.NumResponse)
}
NumResponse::NumResponse(const NumResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  output_ = from.output_;
  // @@protoc_insertion_point(copy_constructor:testNamespace.NumResponse)
}

void NumResponse::SharedCtor() {
  output_ = 0;
}

NumResponse::~NumResponse() {
  // @@protoc_insertion_point(destructor:testNamespace.NumResponse)
  SharedDtor();
}

void NumResponse::SharedDtor() {
}

void NumResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* NumResponse::descriptor() {
  ::protobuf_Test_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Test_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NumResponse& NumResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Test_2eproto::scc_info_NumResponse.base);
  return *internal_default_instance();
}


void NumResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:testNamespace.NumResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  output_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NumResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:testNamespace.NumResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 output = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_output();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &output_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:testNamespace.NumResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:testNamespace.NumResponse)
  return false;
#undef DO_
}

void NumResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:testNamespace.NumResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 output = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->output(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:testNamespace.NumResponse)
}

::google::protobuf::uint8* NumResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:testNamespace.NumResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 output = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->output(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testNamespace.NumResponse)
  return target;
}

size_t NumResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testNamespace.NumResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional int32 output = 1;
  if (has_output()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->output());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NumResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:testNamespace.NumResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const NumResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NumResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:testNamespace.NumResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:testNamespace.NumResponse)
    MergeFrom(*source);
  }
}

void NumResponse::MergeFrom(const NumResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:testNamespace.NumResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_output()) {
    set_output(from.output());
  }
}

void NumResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:testNamespace.NumResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NumResponse::CopyFrom(const NumResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testNamespace.NumResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NumResponse::IsInitialized() const {
  return true;
}

void NumResponse::Swap(NumResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NumResponse::InternalSwap(NumResponse* other) {
  using std::swap;
  swap(output_, other->output_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NumResponse::GetMetadata() const {
  protobuf_Test_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Test_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

NumService::~NumService() {}

const ::google::protobuf::ServiceDescriptor* NumService::descriptor() {
  protobuf_Test_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Test_2eproto::file_level_service_descriptors[0];
}

const ::google::protobuf::ServiceDescriptor* NumService::GetDescriptor() {
  return descriptor();
}

void NumService::add(::google::protobuf::RpcController* controller,
                         const ::testNamespace::NumRequest*,
                         ::testNamespace::NumResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method add() not implemented.");
  done->Run();
}

void NumService::minus(::google::protobuf::RpcController* controller,
                         const ::testNamespace::NumRequest*,
                         ::testNamespace::NumResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method minus() not implemented.");
  done->Run();
}

void NumService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), protobuf_Test_2eproto::file_level_service_descriptors[0]);
  switch(method->index()) {
    case 0:
      add(controller,
             ::google::protobuf::down_cast<const ::testNamespace::NumRequest*>(request),
             ::google::protobuf::down_cast< ::testNamespace::NumResponse*>(response),
             done);
      break;
    case 1:
      minus(controller,
             ::google::protobuf::down_cast<const ::testNamespace::NumRequest*>(request),
             ::google::protobuf::down_cast< ::testNamespace::NumResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& NumService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::testNamespace::NumRequest::default_instance();
    case 1:
      return ::testNamespace::NumRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& NumService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::testNamespace::NumResponse::default_instance();
    case 1:
      return ::testNamespace::NumResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

NumService_Stub::NumService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
NumService_Stub::NumService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
NumService_Stub::~NumService_Stub() {
  if (owns_channel_) delete channel_;
}

void NumService_Stub::add(::google::protobuf::RpcController* controller,
                              const ::testNamespace::NumRequest* request,
                              ::testNamespace::NumResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void NumService_Stub::minus(::google::protobuf::RpcController* controller,
                              const ::testNamespace::NumRequest* request,
                              ::testNamespace::NumResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace testNamespace
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::testNamespace::NumRequest* Arena::CreateMaybeMessage< ::testNamespace::NumRequest >(Arena* arena) {
  return Arena::CreateInternal< ::testNamespace::NumRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::testNamespace::NumResponse* Arena::CreateMaybeMessage< ::testNamespace::NumResponse >(Arena* arena) {
  return Arena::CreateInternal< ::testNamespace::NumResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
